1- create the directory to the system
2- create the project
  # npm init -y

3- create the git project and set the project
  # create the repository on the github webpage
  # follow the instructions to setting the project with that

4- install the npm packages needed (it is also possible to do it later on)
  # npm i express   // it installs express node framework
  # npm i nodemon
    * need to set package.jason with ` "start": "nodemon server.js" `
  # npm i body-parser

* when using process.env, it means accessing node environment variables
* when the port got stuck:
  # lsof -i :<port_number>  // it find the pid of the app which got the port stuck
  # kill -9 <pid>           // it kills the app which got the port stuck

5- It's a good practice to having routes, which allows separate the scope by files.
  In this project, take a look at api/routes files

6- Morgan library is used due to log the HTTP requests on the screen

7- BodyParser - https://www.npmjs.com/package/body-parser
Node.js body parsing middleware.
Parse incoming request bodies in a middleware before your handlers, available under the req.body property.
Note As req.body's shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, req.body.foo.toString() may fail in multiple ways, for example the foo property may not be there or may not be a string, and toString may not be a function and instead a string or other user input.
This does not handle multipart bodies, due to their complex and typically large nature. For multipart bodies, you may be interested in the following modules: multer (and others)

8- CORS => Cross-Origin Resource Sharing
 It is a secutiry mechanism enforced by the browsers which blocks access to different sources.
 Postman does not care about CORS.

 https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
 Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to tell browsers to give a web application running at one origin, access to selected resources from a different origin. A web application executes a cross-origin HTTP request when it requests a resource that has a different origin (domain, protocol, or port) from its own.

9- 